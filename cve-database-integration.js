// Enhanced CVE Database Integration for Real Vulnerability Assessment
const fs = require('fs');
const https = require('https');

// NIST NVD CVE Database Integration
class CVEDatabaseService {
  constructor() {
    this.cveCache = new Map();
    this.lastUpdate = null;
  }

  // Fetch real CVE data from NIST NVD
  async fetchCVEData(cveId) {
    try {
      const url = `https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=${cveId}`;
      
      return new Promise((resolve, reject) => {
        https.get(url, (res) => {
          let data = '';
          res.on('data', (chunk) => data += chunk);
          res.on('end', () => {
            try {
              const parsed = JSON.parse(data);
              if (parsed.vulnerabilities && parsed.vulnerabilities.length > 0) {
                const cve = parsed.vulnerabilities[0].cve;
                const cvss = this.extractCVSS(cve);
                resolve({
                  id: cveId,
                  description: cve.descriptions[0]?.value || 'No description available',
                  severity: cvss.severity,
                  score: cvss.score,
                  vector: cvss.vector,
                  published: cve.published,
                  lastModified: cve.lastModified
                });
              } else {
                resolve(null);
              }
            } catch (error) {
              reject(error);
            }
          });
        }).on('error', reject);
      });
    } catch (error) {
      console.error(`CVE fetch failed for ${cveId}:`, error);
      return null;
    }
  }

  extractCVSS(cve) {
    // Extract CVSS v3.1 or v3.0 scores
    const metrics = cve.metrics;
    let cvss = null;

    if (metrics.cvssMetricV31 && metrics.cvssMetricV31.length > 0) {
      cvss = metrics.cvssMetricV31[0].cvssData;
    } else if (metrics.cvssMetricV30 && metrics.cvssMetricV30.length > 0) {
      cvss = metrics.cvssMetricV30[0].cvssData;
    } else if (metrics.cvssMetricV2 && metrics.cvssMetricV2.length > 0) {
      cvss = metrics.cvssMetricV2[0].cvssData;
    }

    if (cvss) {
      return {
        score: cvss.baseScore,
        severity: cvss.baseSeverity || this.scoresToSeverity(cvss.baseScore),
        vector: cvss.vectorString
      };
    }

    return { score: 0, severity: 'UNKNOWN', vector: 'N/A' };
  }

  scoresToSeverity(score) {
    if (score >= 9.0) return 'CRITICAL';
    if (score >= 7.0) return 'HIGH';
    if (score >= 4.0) return 'MEDIUM';
    return 'LOW';
  }

  // Service vulnerability mappings with real CVE data
  async getServiceVulnerabilities(service, port) {
    const serviceMap = {
      'ssh': ['CVE-2023-48795', 'CVE-2023-51385', 'CVE-2024-6387'],
      'http': ['CVE-2024-27316', 'CVE-2023-44487', 'CVE-2024-6387'],
      'https': ['CVE-2024-2511', 'CVE-2023-50164', 'CVE-2024-5535'],
      'mysql': ['CVE-2024-20961', 'CVE-2023-22084', 'CVE-2024-20982'],
      'microsoft-ds': ['CVE-2024-21334', 'CVE-2023-35311', 'CVE-2024-26169'],
      'msrpc': ['CVE-2024-20674', 'CVE-2023-36884', 'CVE-2024-21351'],
      'ms-wbt-server': ['CVE-2024-21320', 'CVE-2023-21563', 'CVE-2024-21338']
    };

    const cveIds = serviceMap[service] || [];
    const vulnerabilities = [];

    for (const cveId of cveIds) {
      try {
        const cveData = await this.fetchCVEData(cveId);
        if (cveData) {
          vulnerabilities.push({
            cve: cveId,
            severity: cveData.severity,
            score: cveData.score,
            description: cveData.description.substring(0, 200) + '...',
            service: service,
            port: port
          });
        }
      } catch (error) {
        console.error(`Failed to fetch CVE ${cveId}:`, error);
      }
    }

    return vulnerabilities;
  }

  // Threat intelligence correlation
  async correlateThreatIntelligence(vulnerabilities) {
    const threatCorrelations = [];
    
    for (const vuln of vulnerabilities) {
      // MITRE ATT&CK technique mapping
      const mitreMap = {
        'CVE-2023-48795': 'T1557 - Adversary-in-the-Middle',
        'CVE-2024-27316': 'T1190 - Exploit Public-Facing Application',
        'CVE-2024-21334': 'T1210 - Exploitation of Remote Services',
        'CVE-2024-20674': 'T1055 - Process Injection',
        'CVE-2024-21320': 'T1021.001 - Remote Desktop Protocol'
      };

      if (mitreMap[vuln.cve]) {
        threatCorrelations.push({
          cve: vuln.cve,
          technique: mitreMap[vuln.cve],
          severity: vuln.severity,
          exploitability: this.getExploitabilityScore(vuln.cve)
        });
      }
    }

    return threatCorrelations;
  }

  getExploitabilityScore(cve) {
    // Known exploitability scores for critical CVEs
    const exploitMap = {
      'CVE-2024-21334': 'HIGH - Active exploitation in wild',
      'CVE-2024-20674': 'MEDIUM - Proof of concept available',
      'CVE-2024-21320': 'HIGH - Remote code execution',
      'CVE-2023-48795': 'LOW - Protocol downgrade attack'
    };

    return exploitMap[cve] || 'UNKNOWN';
  }
}

module.exports = CVEDatabaseService;